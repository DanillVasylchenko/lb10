"""
    Реалізувати програмно мовою Python завдання з наведеного нижче списку. Для
кожної з задач алгоритм реалізувати з використанням рекурсії і ітерації. Аргументувати
письмово доцільність вибору в кожному випадку рекурсії або ітерації (використовувати
в якості критеріїв - час розробки та виконання програм, обсяг займаної пам'яті,
читабельність програми).

2. Сформувати функцію для обчислення цифрового кореню натурального числа.
Цифровий корінь отримується наступним чином: необхідно скласти всі цифри заданого
числа, потім скласти всі цифри знайденої суми і повторювати процес до тих пір, поки
сума не буде дорівнювати однозначному числу, що і буде цифровим коренем заданого
числа.

Васильченко Даниїл 122 А
"""
from time import time  # для підрахунку часу виконання треба використовувати великі значення


# ІТЕРАЦІЯ
def iteration_digital_square(n):
    while n > 9:
        i = int(n % 10)
        n = n // 10
        n = n + i
    return n


# РЕКУРСІЯ
def recursion_digital_square(n):
    if n > 9:
        return recursion_digital_square(n // 10 + n % 10)
    return n


x = int((input('F = ')))
tic1 = time()
print("Результат виконання рекурсією: \n", recursion_digital_square(x))
toc1 = time()
recursion_time = toc1 - tic1
tic2 = time()
print("Результат виконання ітерацією: \n", iteration_digital_square(x))
toc2 = time()
iteration_time = toc2 - tic2
print()
print("Час розробки: обидва способи прості у реалізації, але рекрсія потребує менше коду\n"
      f"Час виконання: ітерація = {iteration_time}\n"
      f"               рекурсія = {recursion_time}\nІтерація виконується швидше\n"
      "Обсяг пам'яті: рекурсія забирає більше пам'яті через зберігання значень у стеку\n"
      "Обидва методи читабельні, але рекурсивний метод може бути інтуїтивно зрозуміліший")
